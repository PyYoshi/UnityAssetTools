package main

import (
	"encoding/csv"
	"flag"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

var (
	classesTxtPath string
	outputPath     string
)

func init() {
	flag.StringVar(&classesTxtPath, "classes", "", "classes.txt path")
	flag.StringVar(&outputPath, "output", "", "Output path")
}

func main() {
	flag.Parse()

	b, err := ioutil.ReadFile(classesTxtPath)
	if err != nil {
		log.Fatal(err)
		return
	}

	if len(b) == 0 {
		log.Fatal("classes.txt is empty")
		return
	}

	r := csv.NewReader(strings.NewReader(string(b)))
	r.Comma = '\t'
	r.Comment = '#'

	records, err := r.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	var g generator
	g.Printf("// generated by gen_classids %s; DO NOT EDIT\n", strings.Join(os.Args[1:], " "))
	g.Println("")
	g.Println("package unity")
	g.Println("")
	g.Println("import \"fmt\"")
	g.Println("")

	g.Println("const (")
	g.Println("Null ClassID = 0")
	for _, record := range records {
		g.Printf("%s ClassID = %s\n", record[1], record[0])
	}
	g.Println(")")
	g.Println("")

	g.Println("func (c ClassID) String() string {")
	g.Println("switch c {")
	for _, record := range records {
		g.Printf("case %s:\n", record[0])
		g.Printf("return \"%s\"\n", record[1])
	}
	g.Println("default:")
	g.Println("panic(fmt.Errorf(\"Unexpected ClassID: %d\", c))")
	g.Println("}")
	g.Println("}")

	dst := g.Format()
	err = ioutil.WriteFile(outputPath, dst, 0644)
	if err != nil {
		log.Fatal(err)
	}
}
